{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeGeometry = void 0;\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar computeGeometry = function computeGeometry(contentSize, placement, fromRect, displayArea, arrowSize) {\n  var effectiveArrowSize = getArrowSize(arrowSize, placement);\n  switch (placement) {\n    case 'top':\n      return computeTopGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    case 'bottom':\n      return computeBottomGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    case 'start':\n      return computeStartGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    case 'end':\n      return computeEndGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    default:\n      return computeAutoGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n  }\n};\nexports.computeGeometry = computeGeometry;\nvar getArrowSize = function getArrowSize(size, placement) {\n  if (placement === 'start' || placement === 'end') {\n    return {\n      width: size.height,\n      height: size.width\n    };\n  }\n  return size;\n};\nvar computeTopGeometry = function computeTopGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var origin = {\n    x: Math.min(displayArea.x + displayArea.width - contentSize.width, Math.max(displayArea.x, fromRect.x + (fromRect.width - contentSize.width) / 2 - (react_native_1.I18nManager.isRTL ? fromRect.width : 0))),\n    y: fromRect.y - contentSize.height - arrowSize.height\n  };\n  var anchor = {\n    x: fromRect.x + fromRect.width / 2 * (react_native_1.I18nManager.isRTL ? -1 : 1),\n    y: fromRect.y\n  };\n  return {\n    origin: origin,\n    anchor: anchor,\n    placement: 'top'\n  };\n};\nvar computeBottomGeometry = function computeBottomGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var origin = {\n    x: Math.min(displayArea.x + displayArea.width - contentSize.width, Math.max(displayArea.x, fromRect.x + (fromRect.width - contentSize.width) / 2 - (react_native_1.I18nManager.isRTL ? fromRect.width : 0))),\n    y: fromRect.y + fromRect.height + arrowSize.height\n  };\n  var anchor = {\n    x: fromRect.x + fromRect.width / 2 * (react_native_1.I18nManager.isRTL ? -1 : 1),\n    y: fromRect.y + fromRect.height\n  };\n  return {\n    origin: origin,\n    anchor: anchor,\n    placement: 'bottom'\n  };\n};\nvar computeStartGeometry = function computeStartGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var origin = {\n    x: fromRect.x - contentSize.width - arrowSize.width - (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n    y: Math.min(displayArea.y + displayArea.height - contentSize.height, Math.max(displayArea.y, fromRect.y + fromRect.height - contentSize.height))\n  };\n  var anchor = {\n    x: fromRect.x - (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n    y: fromRect.y + fromRect.height - contentSize.height / 2\n  };\n  return {\n    origin: origin,\n    anchor: anchor,\n    placement: 'start'\n  };\n};\nvar computeEndGeometry = function computeEndGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var origin = {\n    x: fromRect.x + fromRect.width + arrowSize.width - (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n    y: Math.min(displayArea.y + displayArea.height - contentSize.height, Math.max(displayArea.y, fromRect.y + fromRect.height - contentSize.height))\n  };\n  var anchor = {\n    x: fromRect.x + (react_native_1.I18nManager.isRTL ? 0 : fromRect.width),\n    y: fromRect.y + fromRect.height - contentSize.height / 2\n  };\n  return {\n    origin: origin,\n    anchor: anchor,\n    placement: 'end'\n  };\n};\nvar computeAutoGeometry = function computeAutoGeometry(displayArea, fromRect, contentSize, arrowSize) {\n  var geom = null;\n  var placements = ['start', 'end', 'top', 'bottom'];\n  for (var i = 0; i < 4; i += 1) {\n    var placement = placements[i];\n    geom = (0, exports.computeGeometry)(contentSize, placement, fromRect, displayArea, arrowSize);\n    var _geom = geom,\n      origin = _geom.origin;\n    if (origin.x >= displayArea.x && origin.x <= displayArea.x + displayArea.width - contentSize.width && origin.y >= displayArea.y && origin.y <= displayArea.y + displayArea.height - contentSize.height) {\n      break;\n    }\n  }\n  return geom;\n};","map":{"version":3,"sources":["../src/PopoverGeometry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeGeometry = void 0;\nconst react_native_1 = require(\"react-native\");\nconst computeGeometry = (contentSize, placement, fromRect, displayArea, arrowSize) => {\n    const effectiveArrowSize = getArrowSize(arrowSize, placement);\n    switch (placement) {\n        case 'top':\n            return computeTopGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n        case 'bottom':\n            return computeBottomGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n        case 'start':\n            return computeStartGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n        case 'end':\n            return computeEndGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n        default:\n            return computeAutoGeometry(displayArea, fromRect, contentSize, effectiveArrowSize);\n    }\n};\nexports.computeGeometry = computeGeometry;\nconst getArrowSize = (size, placement) => {\n    if (placement === 'start' || placement === 'end') {\n        return { width: size.height, height: size.width };\n    }\n    return size;\n};\nconst computeTopGeometry = (displayArea, fromRect, contentSize, arrowSize) => {\n    const origin = {\n        x: Math.min(displayArea.x + displayArea.width - contentSize.width, Math.max(displayArea.x, fromRect.x +\n            (fromRect.width - contentSize.width) / 2 -\n            (react_native_1.I18nManager.isRTL ? fromRect.width : 0))),\n        y: fromRect.y - contentSize.height - arrowSize.height,\n    };\n    const anchor = {\n        x: fromRect.x + (fromRect.width / 2) * (react_native_1.I18nManager.isRTL ? -1 : 1),\n        y: fromRect.y,\n    };\n    return { origin, anchor, placement: 'top' };\n};\nconst computeBottomGeometry = (displayArea, fromRect, contentSize, arrowSize) => {\n    const origin = {\n        x: Math.min(displayArea.x + displayArea.width - contentSize.width, Math.max(displayArea.x, fromRect.x +\n            (fromRect.width - contentSize.width) / 2 -\n            (react_native_1.I18nManager.isRTL ? fromRect.width : 0))),\n        y: fromRect.y + fromRect.height + arrowSize.height,\n    };\n    const anchor = {\n        x: fromRect.x + (fromRect.width / 2) * (react_native_1.I18nManager.isRTL ? -1 : 1),\n        y: fromRect.y + fromRect.height,\n    };\n    return { origin, anchor, placement: 'bottom' };\n};\nconst computeStartGeometry = (displayArea, fromRect, contentSize, arrowSize) => {\n    const origin = {\n        x: fromRect.x -\n            contentSize.width -\n            arrowSize.width -\n            (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n        y: Math.min(displayArea.y + displayArea.height - contentSize.height, Math.max(displayArea.y, fromRect.y + fromRect.height - contentSize.height)),\n    };\n    const anchor = {\n        x: fromRect.x - (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n        y: fromRect.y + fromRect.height - contentSize.height / 2,\n    };\n    return { origin, anchor, placement: 'start' };\n};\nconst computeEndGeometry = (displayArea, fromRect, contentSize, arrowSize) => {\n    const origin = {\n        x: fromRect.x +\n            fromRect.width +\n            arrowSize.width -\n            (react_native_1.I18nManager.isRTL ? fromRect.width : 0),\n        y: Math.min(displayArea.y + displayArea.height - contentSize.height, Math.max(displayArea.y, fromRect.y + fromRect.height - contentSize.height)),\n    };\n    const anchor = {\n        x: fromRect.x + (react_native_1.I18nManager.isRTL ? 0 : fromRect.width),\n        y: fromRect.y + fromRect.height - contentSize.height / 2,\n    };\n    return { origin, anchor, placement: 'end' };\n};\nconst computeAutoGeometry = (displayArea, fromRect, contentSize, arrowSize) => {\n    let geom = null;\n    const placements = ['start', 'end', 'top', 'bottom'];\n    for (let i = 0; i < 4; i += 1) {\n        const placement = placements[i];\n        geom = (0, exports.computeGeometry)(contentSize, placement, fromRect, displayArea, arrowSize);\n        const { origin } = geom;\n        if (origin.x >= displayArea.x &&\n            origin.x <= displayArea.x + displayArea.width - contentSize.width &&\n            origin.y >= displayArea.y &&\n            origin.y <= displayArea.y + displayArea.height - contentSize.height) {\n            break;\n        }\n    }\n    return geom;\n};\n//# sourceMappingURL=PopoverGeometry.js.map"]},"metadata":{},"sourceType":"script"}