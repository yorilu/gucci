{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Constants from 'expo-constants';\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport URL from 'url-parse';\nimport NativeLinking from \"./ExpoLinking\";\nimport { hasCustomScheme, resolveScheme } from \"./Schemes\";\nfunction validateURL(url) {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\nfunction getHostUri() {\n  var _Constants$manifest, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2;\n  if ((_Constants$manifest = Constants.manifest) != null && _Constants$manifest.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if ((_Constants$manifest2 = Constants.manifest2) != null && (_Constants$manifest2$ = _Constants$manifest2.extra) != null && (_Constants$manifest2$2 = _Constants$manifest2$.expoClient) != null && _Constants$manifest2$2.hostUri) {\n    return Constants.manifest2.extra.expoClient.hostUri;\n  } else if (!hasCustomScheme()) {\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\nfunction isExpoHosted() {\n  var _Constants$manifest3, _Constants$manifest4, _Constants$manifest4$, _Constants$manifest4$2;\n  var hostUri = getHostUri();\n  return !!(hostUri && (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test|expo\\.dev)(:.*)?(\\/.*)?$/.test(hostUri) || (_Constants$manifest3 = Constants.manifest) != null && _Constants$manifest3.developer || (_Constants$manifest4 = Constants.manifest2) != null && (_Constants$manifest4$ = _Constants$manifest4.extra) != null && (_Constants$manifest4$2 = _Constants$manifest4$.expoGo) != null && _Constants$manifest4$2.developer));\n}\nfunction removeScheme(url) {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\nfunction removePort(url) {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\nfunction removeLeadingSlash(url) {\n  return url.replace(/^\\//, '');\n}\nfunction removeTrailingSlashAndQueryString(url) {\n  return url.replace(/\\/?\\?.*$/, '');\n}\nfunction ensureTrailingSlash(input, shouldAppend) {\n  var hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return input + \"/\";\n  }\n  return input;\n}\nfunction ensureLeadingSlash(input, shouldAppend) {\n  var hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return \"/\" + input;\n  }\n  return input;\n}\nexport function makeUrl() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var queryParams = arguments.length > 1 ? arguments[1] : undefined;\n  var scheme = arguments.length > 2 ? arguments[2] : undefined;\n  return createURL(path, {\n    queryParams: queryParams,\n    scheme: scheme,\n    isTripleSlashed: true\n  });\n}\nexport function createURL(path) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    scheme = _ref.scheme,\n    _ref$queryParams = _ref.queryParams,\n    queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams,\n    _ref$isTripleSlashed = _ref.isTripleSlashed,\n    isTripleSlashed = _ref$isTripleSlashed === void 0 ? false : _ref$isTripleSlashed;\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n    var origin = ensureTrailingSlash(window.location.origin, false);\n    var _queryString = qs.stringify(queryParams);\n    if (_queryString) {\n      _queryString = \"?\" + _queryString;\n    }\n    var outputPath = path;\n    if (outputPath) outputPath = ensureLeadingSlash(path, true);\n    return encodeURI(\"\" + origin + outputPath + _queryString);\n  }\n  var resolvedScheme = resolveScheme({\n    scheme: scheme\n  });\n  var hostUri = getHostUri() || '';\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = \"/--/\" + removeLeadingSlash(path);\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = \"/\" + path;\n    }\n  } else {\n    path = '';\n  }\n  var queryString = '';\n  var queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    var paramsFromHostUri = {};\n    try {\n      var parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch (_unused) {}\n    queryParams = _objectSpread(_objectSpread({}, queryParams), paramsFromHostUri);\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = \"?\" + queryString;\n  }\n  hostUri = ensureLeadingSlash(hostUri, !isTripleSlashed);\n  return encodeURI(resolvedScheme + \":\" + (isTripleSlashed ? '/' : '') + \"/\" + hostUri + path + queryString);\n}\nexport function parse(url) {\n  validateURL(url);\n  var parsed = URL(url, true);\n  for (var param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]);\n  }\n  var queryParams = parsed.query;\n  var hostUri = getHostUri() || '';\n  var hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n  var path = parsed.pathname || null;\n  var hostname = parsed.hostname || null;\n  var scheme = parsed.protocol || null;\n  if (scheme) {\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n  if (path) {\n    path = removeLeadingSlash(path);\n    var expoPrefix = null;\n    if (hostUriStripped) {\n      var parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).concat(['--/']).join('/');\n    }\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n  return {\n    hostname: hostname,\n    path: path,\n    queryParams: queryParams,\n    scheme: scheme\n  };\n}\nexport function addEventListener(type, handler) {\n  return NativeLinking.addEventListener(type, handler);\n}\nexport function removeEventListener(type, handler) {\n  console.warn('The `removeEventListener()` method has been removed. Please call instead `remove()` on the return value of `addEventListener()`.');\n}\nexport function parseInitialURLAsync() {\n  return _parseInitialURLAsync.apply(this, arguments);\n}\nfunction _parseInitialURLAsync() {\n  _parseInitialURLAsync = _asyncToGenerator(function* () {\n    var initialUrl = yield NativeLinking.getInitialURL();\n    if (!initialUrl) {\n      return {\n        scheme: null,\n        hostname: null,\n        path: null,\n        queryParams: null\n      };\n    }\n    return parse(initialUrl);\n  });\n  return _parseInitialURLAsync.apply(this, arguments);\n}\nexport function sendIntent(_x, _x2) {\n  return _sendIntent.apply(this, arguments);\n}\nfunction _sendIntent() {\n  _sendIntent = _asyncToGenerator(function* (action, extras) {\n    if (Platform.OS === 'android') {\n      return yield NativeLinking.sendIntent(action, extras);\n    }\n    throw new UnavailabilityError('Linking', 'sendIntent');\n  });\n  return _sendIntent.apply(this, arguments);\n}\nexport function openSettings() {\n  return _openSettings.apply(this, arguments);\n}\nfunction _openSettings() {\n  _openSettings = _asyncToGenerator(function* () {\n    if (Platform.OS === 'web') {\n      throw new UnavailabilityError('Linking', 'openSettings');\n    }\n    if (NativeLinking.openSettings) {\n      return yield NativeLinking.openSettings();\n    }\n    yield openURL('app-settings:');\n  });\n  return _openSettings.apply(this, arguments);\n}\nexport function getInitialURL() {\n  return _getInitialURL.apply(this, arguments);\n}\nfunction _getInitialURL() {\n  _getInitialURL = _asyncToGenerator(function* () {\n    var _yield$NativeLinking$;\n    return (_yield$NativeLinking$ = yield NativeLinking.getInitialURL()) != null ? _yield$NativeLinking$ : null;\n  });\n  return _getInitialURL.apply(this, arguments);\n}\nexport function openURL(_x3) {\n  return _openURL.apply(this, arguments);\n}\nfunction _openURL() {\n  _openURL = _asyncToGenerator(function* (url) {\n    validateURL(url);\n    return yield NativeLinking.openURL(url);\n  });\n  return _openURL.apply(this, arguments);\n}\nexport function canOpenURL(_x4) {\n  return _canOpenURL.apply(this, arguments);\n}\nfunction _canOpenURL() {\n  _canOpenURL = _asyncToGenerator(function* (url) {\n    validateURL(url);\n    return yield NativeLinking.canOpenURL(url);\n  });\n  return _canOpenURL.apply(this, arguments);\n}\nexport function useURL() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    url = _useState2[0],\n    setLink = _useState2[1];\n  function onChange(event) {\n    setLink(event.url);\n  }\n  useEffect(function () {\n    getInitialURL().then(function (url) {\n      return setLink(url);\n    });\n    var subscription = addEventListener('url', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return url;\n}\nexport * from \"./Linking.types\";\nexport * from \"./Schemes\";","map":{"version":3,"sources":["../src/Linking.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport { EmitterSubscription } from 'react-native';\nimport URL from 'url-parse';\n\nimport NativeLinking from './ExpoLinking';\nimport {\n  CreateURLOptions,\n  ParsedURL,\n  QueryParams,\n  SendIntentExtras,\n  URLListener,\n} from './Linking.types';\nimport { hasCustomScheme, resolveScheme } from './Schemes';\n\nfunction validateURL(url: string): void {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\nfunction getHostUri(): string | null {\n  if (Constants.manifest?.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if (Constants.manifest2?.extra?.expoClient?.hostUri) {\n    return Constants.manifest2.extra.expoClient.hostUri;\n  } else if (!hasCustomScheme()) {\n    // we're probably not using up-to-date xdl, so just fake it for now\n    // we have to remove the /--/ on the end since this will be inserted again later\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\n\nfunction isExpoHosted(): boolean {\n  const hostUri = getHostUri();\n  return !!(\n    hostUri &&\n    (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test|expo\\.dev)(:.*)?(\\/.*)?$/.test(hostUri) ||\n      Constants.manifest?.developer ||\n      Constants.manifest2?.extra?.expoGo?.developer)\n  );\n}\n\nfunction removeScheme(url: string): string {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction removePort(url: string): string {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction removeLeadingSlash(url: string): string {\n  return url.replace(/^\\//, '');\n}\n\nfunction removeTrailingSlashAndQueryString(url: string): string {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction ensureTrailingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return `${input}/`;\n  }\n  return input;\n}\n\nfunction ensureLeadingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return `/${input}`;\n  }\n  return input;\n}\n\n// @needsAudit\n/**\n * Create a URL that works for the environment the app is currently running in.\n * The scheme in bare and standalone must be defined in the app.json under `expo.scheme`.\n *\n * # Examples\n * - Bare: empty string\n * - Standalone, Custom: `yourscheme:///path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path addition path components to append to the base URL.\n * @param queryParams An object with a set of query parameters. These will be merged with any\n * Expo-specific parameters that are needed (e.g. release channel) and then appended to the URL\n * as a query string.\n * @param scheme Optional URI protocol to use in the URL `<scheme>:///`, when `undefined` the scheme\n * will be chosen from the Expo config (`app.config.js` or `app.json`).\n * @return A URL string which points to your app with the given deep link information.\n * @deprecated An alias for [`createURL()`](#linkingcreateurlpath-namedparameters). This method is\n * deprecated and will be removed in a future SDK version.\n */\nexport function makeUrl(path: string = '', queryParams?: QueryParams, scheme?: string): string {\n  return createURL(path, { queryParams, scheme, isTripleSlashed: true });\n}\n\n// @needsAudit\n/**\n * Helper method for constructing a deep link into your app, given an optional path and set of query\n * parameters. Creates a URI scheme with two slashes by default.\n *\n * The scheme in bare and standalone must be defined in the Expo config (`app.config.js` or `app.json`)\n * under `expo.scheme`.\n *\n * # Examples\n * - Bare: `<scheme>://path` - uses provided scheme or scheme from Expo config `scheme`.\n * - Standalone, Custom: `yourscheme://path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path Addition path components to append to the base URL.\n * @param namedParameters Additional options object.\n * @return A URL string which points to your app with the given deep link information.\n */\nexport function createURL(\n  path: string,\n  { scheme, queryParams = {}, isTripleSlashed = false }: CreateURLOptions = {}\n): string {\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n\n    const origin = ensureTrailingSlash(window.location.origin, false);\n    let queryString = qs.stringify(queryParams);\n    if (queryString) {\n      queryString = `?${queryString}`;\n    }\n\n    let outputPath = path;\n    if (outputPath) outputPath = ensureLeadingSlash(path, true);\n\n    return encodeURI(`${origin}${outputPath}${queryString}`);\n  }\n\n  const resolvedScheme = resolveScheme({ scheme });\n\n  let hostUri = getHostUri() || '';\n\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = `/--/${removeLeadingSlash(path)}`;\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = `/${path}`;\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  const queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      const parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = ensureLeadingSlash(hostUri, !isTripleSlashed);\n\n  return encodeURI(\n    `${resolvedScheme}:${isTripleSlashed ? '/' : ''}/${hostUri}${path}${queryString}`\n  );\n}\n\n// @needsAudit\n/**\n * Helper method for parsing out deep link information from a URL.\n * @param url A URL that points to the currently running experience (e.g. an output of `Linking.createURL()`).\n * @return A `ParsedURL` object.\n */\nexport function parse(url: string): ParsedURL {\n  validateURL(url);\n\n  const parsed = URL(url, /* parseQueryString */ true);\n\n  for (const param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]!);\n  }\n  const queryParams = parsed.query;\n\n  const hostUri = getHostUri() || '';\n  const hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n\n  let path = parsed.pathname || null;\n  let hostname = parsed.hostname || null;\n  let scheme = parsed.protocol || null;\n\n  if (scheme) {\n    // Remove colon at end\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n\n  if (path) {\n    path = removeLeadingSlash(path);\n\n    let expoPrefix: string | null = null;\n    if (hostUriStripped) {\n      const parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).concat(['--/']).join('/');\n    }\n\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n\n  return {\n    hostname,\n    path,\n    queryParams,\n    scheme,\n  };\n}\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @return An EmitterSubscription that has the remove method from EventSubscription\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: 'url', handler: URLListener): EmitterSubscription {\n  return NativeLinking.addEventListener(type, handler);\n}\n\n/**\n * Remove a handler by passing the `url` event type and the handler.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#removeeventlistener).\n *\n * @deprecated Call `remove()` on the return value of `addEventListener()` instead.\n */\nexport function removeEventListener(type: 'url', handler: URLListener): void {\n  console.warn(\n    'The `removeEventListener()` method has been removed. Please call instead `remove()` on the return value of `addEventListener()`.'\n  );\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await NativeLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [IntentLauncher](./intent-launcher) instead, `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await NativeLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the app’s custom settings, if it has any.\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (NativeLinking.openSettings) {\n    return await NativeLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await NativeLinking.getInitialURL()) ?? null;\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open, eg: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await NativeLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n *\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#linking-from-your-app).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await NativeLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n\n  return url;\n}\n\nexport * from './Linking.types';\nexport * from './Schemes';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}