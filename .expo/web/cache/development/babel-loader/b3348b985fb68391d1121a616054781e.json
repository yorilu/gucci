{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\nvar EventTypes = ['url'];\nvar listeners = [];\nexport default {\n  addEventListener: function addEventListener(type, listener) {\n    var _this = this;\n    if (!Platform.isDOMAvailable) {\n      return {\n        remove: function remove() {}\n      };\n    }\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n    var nativeListener = function nativeListener(nativeEvent) {\n      return listener({\n        url: window.location.href,\n        nativeEvent: nativeEvent\n      });\n    };\n    listeners.push({\n      listener: listener,\n      nativeListener: nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: function remove() {\n        _this.removeEventListener(type, listener);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n    var listenerIndex = listeners.findIndex(function (pair) {\n      return pair.listener === listener;\n    });\n    invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    var nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n  canOpenURL: function () {\n    var _canOpenURL = _asyncToGenerator(function* (url) {\n      return true;\n    });\n    function canOpenURL(_x) {\n      return _canOpenURL.apply(this, arguments);\n    }\n    return canOpenURL;\n  }(),\n  getInitialURL: function () {\n    var _getInitialURL = _asyncToGenerator(function* () {\n      if (!Platform.isDOMAvailable) return '';\n      return window.location.href;\n    });\n    function getInitialURL() {\n      return _getInitialURL.apply(this, arguments);\n    }\n    return getInitialURL;\n  }(),\n  openURL: function () {\n    var _openURL = _asyncToGenerator(function* (url) {\n      if (Platform.isDOMAvailable) {\n        window.location = new URL(url, window.location).toString();\n      }\n    });\n    function openURL(_x2) {\n      return _openURL.apply(this, arguments);\n    }\n    return openURL;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoLinking.web.ts"],"names":[],"mappings":";AAAA,SAAS,QAAQ,QAAQ,mBAAmB;AAC5C,OAAO,SAAS,MAAM,WAAW;AAIjC,IAAM,UAAU,GAAG,CAAC,KAAK,CAAC;AAE1B,IAAM,SAAS,GAAmE,EAAE;AAEpF,eAAe;EACb,gBAAgB,4BAAC,IAAW,EAAE,QAAqB,EAAA;IAAA;IAEjD,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;MAC5B,OAAO;QAAE,MAAM,oBAAA,CAAI;MAAC,CAAE;IACvB;IAED,SAAS,CACP,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,mCACA,IAAI,2BACpC;IACD,IAAM,cAAc,GAAsB,SAApC,cAAc,CAAuB,WAAW;MAAA,OACpD,QAAQ,CAAC;QAAE,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI;QAAE,WAAW,EAAX;MAAW,CAAE,CAAC;IAAA;IACtD,SAAS,CAAC,IAAI,CAAC;MAAE,QAAQ,EAAR,QAAQ;MAAE,cAAc,EAAd;IAAc,CAAE,CAAC;IAC5C,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC;IACzD,OAAO;MACL,MAAM,EAAE,kBAAK;QACX,KAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC;MAC1C;KACD;EACH,CAAC;EAED,mBAAmB,+BAAC,IAAW,EAAE,QAAqB,EAAA;IAEpD,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;MAC5B;IACD;IACD,SAAS,CACP,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,sCACG,IAAI,4BACvC;IACD,IAAM,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,UAAC,IAAI;MAAA,OAAK,IAAI,CAAC,QAAQ,KAAK,QAAQ;IAAA,EAAC;IAC/E,SAAS,CACP,aAAa,KAAK,CAAC,CAAC,EACpB,8EAA8E,CAC/E;IACD,IAAM,cAAc,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC,cAAc;IAC9D,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC;IAC5D,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;EACpC,CAAC;EAEK,UAAU;IAAA,+CAAC,GAAW,EAAA;MAE1B,OAAO,IAAI;IACb,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EAEK,aAAa;IAAA,oDAAA;MACjB,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,EAAE;MACvC,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI;IAC7B,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;EAEK,OAAO;IAAA,4CAAC,GAAW,EAAA;MACvB,IAAI,QAAQ,CAAC,cAAc,EAAE;QAE3B,MAAM,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE;MAC3D;IACH,CAAC;IAAA;MAAA;IAAA;IAAA;EAAA;CACF","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): { remove(): void } {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return { remove() {} };\n    }\n\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = (nativeEvent) =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: () => {\n        this.removeEventListener(type, listener);\n      },\n    };\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex((pair) => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!Platform.isDOMAvailable) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (Platform.isDOMAvailable) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}