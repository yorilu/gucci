{"ast":null,"code":"import NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport CameraRollPermissionModule from \"./cameraRollPermissionNativeInterface\";\nvar isIOS = Platform.OS === 'ios';\nif (isIOS && CameraRollPermissionModule == null) {\n  console.error(\"photoLibraryPermissionModule: Native Module 'photoLibraryPermissionModule' was null! Did you run pod install?\");\n}\nexport var cameraRollEventEmitter = new NativeEventEmitter(isIOS ? CameraRollPermissionModule : undefined);\nexport var iosReadGalleryPermission = function iosReadGalleryPermission(accessLevel) {\n  if (!isIOS) throw new Error('this module is available only for ios');\n  return CameraRollPermissionModule.checkPermission(accessLevel);\n};\nexport var iosRequestReadWriteGalleryPermission = function iosRequestReadWriteGalleryPermission() {\n  if (!isIOS) throw new Error('this module is available only for ios');\n  return CameraRollPermissionModule.requestReadWritePermission();\n};\nexport var iosRequestAddOnlyGalleryPermission = function iosRequestAddOnlyGalleryPermission() {\n  if (!isIOS) throw new Error('this module is available only for ios');\n  return CameraRollPermissionModule.requestAddOnlyPermission();\n};\nexport var iosRefreshGallerySelection = function iosRefreshGallerySelection() {\n  if (!isIOS) throw new Error('this module is available only for ios');\n  return CameraRollPermissionModule.refreshPhotoSelection();\n};","map":{"version":3,"sources":["CameraRollIOSPermission.ts"],"names":["CameraRollPermissionModule","isIOS","Platform","OS","console","error","cameraRollEventEmitter","NativeEventEmitter","undefined","iosReadGalleryPermission","accessLevel","Error","checkPermission","iosRequestReadWriteGalleryPermission","requestReadWritePermission","iosRequestAddOnlyGalleryPermission","requestAddOnlyPermission","iosRefreshGallerySelection","refreshPhotoSelection"],"mappings":";;AACA,OAAOA,0BAAP;AAaA,IAAMC,KAAK,GAAGC,QAAQ,CAACC,EAATD,KAAgB,KAA9B;AACA,IAAID,KAAK,IAAID,0BAA0B,IAAI,IAA3C,EAAiD;EAC/CI,OAAO,CAACC,KAARD,CACE,+GADFA,CAAAA;AAGD;AACD,OAAO,IAAME,sBAAsB,GAAG,IAAIC,kBAAJ,CACpCN,KAAK,GAAGD,0BAAH,GAAgCQ,SADD,CAA/B;AAIP,OAAO,IAAMC,wBAAwB,GACnCC,SADWD,wBAAwB,CACnCC,WADsC,EAEK;EAC3C,IAAI,CAACT,KAAL,EAAY,MAAM,IAAIU,KAAJ,CAAU,uCAAV,CAAN;EAEZ,OAAOX,0BAA0B,CAACY,eAA3BZ,CAA2CU,WAA3CV,CAAP;AACD,CANM;AAQP,OAAO,IAAMa,oCAAoC,GAC/C,SADWA,oCAAoC,GACD;EAC5C,IAAI,CAACZ,KAAL,EAAY,MAAM,IAAIU,KAAJ,CAAU,uCAAV,CAAN;EAEZ,OAAOX,0BAA0B,CAACc,0BAA3Bd,EAAP;AACD,CALI;AAOP,OAAO,IAAMe,kCAAkC,GAC7C,SADWA,kCAAkC,GACC;EAC5C,IAAI,CAACd,KAAL,EAAY,MAAM,IAAIU,KAAJ,CAAU,uCAAV,CAAN;EAEZ,OAAOX,0BAA0B,CAACgB,wBAA3BhB,EAAP;AACD,CALI;AAOP,OAAO,IAAMiB,0BAA0B,GAAG,SAA7BA,0BAA0B,GAA2B;EAChE,IAAI,CAAChB,KAAL,EAAY,MAAM,IAAIU,KAAJ,CAAU,uCAAV,CAAN;EAEZ,OAAOX,0BAA0B,CAACkB,qBAA3BlB,EAAP;AACD,CAJM","sourcesContent":["import {NativeEventEmitter, Platform} from 'react-native';\nimport CameraRollPermissionModule from './cameraRollPermissionNativeInterface';\n\n/** Defines ios permission access levels for gallery */\nexport type AccessLevel = 'addOnly' | 'readWrite';\n\nexport type CameraRollAuthorizationStatus =\n  | 'granted'\n  | 'limited'\n  | 'denied'\n  | 'unavailable'\n  | 'blocked'\n  | 'not-determined';\n\nconst isIOS = Platform.OS === 'ios';\nif (isIOS && CameraRollPermissionModule == null) {\n  console.error(\n    \"photoLibraryPermissionModule: Native Module 'photoLibraryPermissionModule' was null! Did you run pod install?\",\n  );\n}\nexport const cameraRollEventEmitter = new NativeEventEmitter(\n  isIOS ? CameraRollPermissionModule : undefined,\n);\n\nexport const iosReadGalleryPermission = (\n  accessLevel: AccessLevel,\n): Promise<CameraRollAuthorizationStatus> => {\n  if (!isIOS) throw new Error('this module is available only for ios');\n\n  return CameraRollPermissionModule.checkPermission(accessLevel);\n};\n\nexport const iosRequestReadWriteGalleryPermission =\n  (): Promise<CameraRollAuthorizationStatus> => {\n    if (!isIOS) throw new Error('this module is available only for ios');\n\n    return CameraRollPermissionModule.requestReadWritePermission();\n  };\n\nexport const iosRequestAddOnlyGalleryPermission =\n  (): Promise<CameraRollAuthorizationStatus> => {\n    if (!isIOS) throw new Error('this module is available only for ios');\n\n    return CameraRollPermissionModule.requestAddOnlyPermission();\n  };\n\nexport const iosRefreshGallerySelection = (): Promise<boolean> => {\n  if (!isIOS) throw new Error('this module is available only for ios');\n\n  return CameraRollPermissionModule.refreshPhotoSelection();\n};\n"]},"metadata":{},"sourceType":"module"}