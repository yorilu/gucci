{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { SegmentedControlTab } from \"./SegmentedControlTab\";\nimport { SegmentsSeparators } from \"./SegmentsSeparators\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SegmentedControl = function SegmentedControl(_ref) {\n  var style = _ref.style,\n    onChange = _ref.onChange,\n    onValueChange = _ref.onValueChange,\n    _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    selectedIndex = _ref.selectedIndex,\n    values = _ref.values,\n    tintColor = _ref.tintColor,\n    backgroundColor = _ref.backgroundColor,\n    fontStyle = _ref.fontStyle,\n    activeFontStyle = _ref.activeFontStyle,\n    appearance = _ref.appearance;\n  var colorSchemeHook = useColorScheme();\n  var colorScheme = appearance || colorSchemeHook;\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    segmentWidth = _React$useState2[0],\n    setSegmentWidth = _React$useState2[1];\n  var animation = React.useRef(new Animated.Value(0)).current;\n  var handleChange = function handleChange(index) {\n    var event = {\n      nativeEvent: {\n        value: values[index],\n        selectedSegmentIndex: index\n      }\n    };\n    onChange && onChange(event);\n    onValueChange && onValueChange(values[index]);\n  };\n  React.useEffect(function () {\n    if (animation && segmentWidth) {\n      var isRTL = I18nManager.isRTL ? -segmentWidth : segmentWidth;\n      Animated.timing(animation, {\n        toValue: isRTL * (selectedIndex || 0),\n        duration: 300,\n        easing: Easing.out(Easing.quad),\n        useNativeDriver: true\n      }).start();\n    }\n  }, [animation, segmentWidth, selectedIndex]);\n  return _jsxs(View, {\n    style: [styles.default, style, colorScheme === 'dark' && styles.darkControl, backgroundColor && {\n      backgroundColor: backgroundColor\n    }, !enabled && styles.disabled],\n    onLayout: function onLayout(_ref2) {\n      var width = _ref2.nativeEvent.layout.width;\n      var newSegmentWidth = values.length ? width / values.length : 0;\n      if (newSegmentWidth !== segmentWidth) {\n        animation.setValue(newSegmentWidth * (selectedIndex || 0));\n        setSegmentWidth(newSegmentWidth);\n      }\n    },\n    children: [!backgroundColor && !tintColor && _jsx(SegmentsSeparators, {\n      values: values.length,\n      selectedIndex: selectedIndex\n    }), _jsx(View, {\n      style: styles.segmentsContainer,\n      children: values && values.map(function (value, index) {\n        return _jsx(SegmentedControlTab, {\n          enabled: enabled,\n          selected: selectedIndex === index,\n          value: value,\n          tintColor: tintColor,\n          fontStyle: fontStyle,\n          activeFontStyle: activeFontStyle,\n          appearance: colorScheme,\n          onSelect: function onSelect() {\n            handleChange(index);\n          }\n        }, index);\n      })\n    }), selectedIndex != null && segmentWidth ? _jsx(Animated.View, {\n      style: [styles.slider, {\n        transform: [{\n          translateX: animation\n        }],\n        width: segmentWidth - 4,\n        backgroundColor: tintColor || (colorScheme === 'dark' ? '#636366' : 'white')\n      }]\n    }) : null]\n  });\n};\nvar styles = StyleSheet.create({\n  default: {\n    overflow: 'hidden',\n    position: 'relative',\n    height: 32,\n    backgroundColor: '#EEEEF0',\n    borderRadius: 9\n  },\n  darkControl: {\n    backgroundColor: '#1C1C1F'\n  },\n  disabled: {\n    opacity: 0.4\n  },\n  slider: {\n    position: 'absolute',\n    borderRadius: 7,\n    top: 2,\n    bottom: 2,\n    right: 2,\n    left: 2,\n    borderWidth: 0.5,\n    borderColor: 'rgba(0,0,0,0.04)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3\n  },\n  segmentsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    elevation: 5,\n    backgroundColor: 'transparent',\n    zIndex: 99\n  }\n});\nexport default SegmentedControl;","map":{"version":3,"names":["React","SegmentedControlTab","SegmentsSeparators","SegmentedControl","style","onChange","onValueChange","enabled","selectedIndex","values","tintColor","backgroundColor","fontStyle","activeFontStyle","appearance","colorSchemeHook","useColorScheme","colorScheme","useState","segmentWidth","setSegmentWidth","animation","useRef","Animated","Value","current","handleChange","index","event","nativeEvent","value","selectedSegmentIndex","useEffect","isRTL","I18nManager","timing","toValue","duration","easing","Easing","out","quad","useNativeDriver","start","styles","default","darkControl","disabled","width","layout","newSegmentWidth","length","setValue","segmentsContainer","map","slider","transform","translateX","StyleSheet","create","overflow","position","height","borderRadius","opacity","top","bottom","right","left","borderWidth","borderColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","flex","flexDirection","justifyContent","alignItems","zIndex"],"sources":["/Users/yori/Documents/project/gucci/node_modules/@react-native-community/segmented-control/js/SegmentedControl.js"],"sourcesContent":["/**\n * @flow\n */\n\n'use strict';\n\nimport * as React from 'react';\n\nimport {\n  Animated,\n  Easing,\n  I18nManager,\n  StyleSheet,\n  View,\n  useColorScheme,\n} from 'react-native';\n\nimport type {SegmentedControlProps} from './types';\nimport {SegmentedControlTab} from './SegmentedControlTab';\nimport {SegmentsSeparators} from './SegmentsSeparators';\n\n/**\n * SegmentedControl\n * iOS 13 Style UISegmentedControl Component for Android and Web\n */\nconst SegmentedControl = ({\n  style,\n  onChange,\n  onValueChange,\n  enabled = true,\n  selectedIndex,\n  values,\n  tintColor,\n  backgroundColor,\n  fontStyle,\n  activeFontStyle,\n  appearance,\n}: SegmentedControlProps): React.Node => {\n  const colorSchemeHook = useColorScheme();\n  const colorScheme = appearance || colorSchemeHook;\n  const [segmentWidth, setSegmentWidth] = React.useState(0);\n  const animation = React.useRef(new Animated.Value(0)).current;\n\n  const handleChange = (index: number) => {\n    // mocks iOS's nativeEvent\n    const event: any = {\n      nativeEvent: {\n        value: values[index],\n        selectedSegmentIndex: index,\n      },\n    };\n    onChange && onChange(event);\n    onValueChange && onValueChange(values[index]);\n  };\n\n  React.useEffect(() => {\n    if (animation && segmentWidth) {\n      let isRTL = I18nManager.isRTL ? -segmentWidth : segmentWidth;\n      Animated.timing(animation, {\n        toValue: isRTL * (selectedIndex || 0),\n        duration: 300,\n        easing: Easing.out(Easing.quad),\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [animation, segmentWidth, selectedIndex]);\n\n  return (\n    <View\n      style={[\n        styles.default,\n        style,\n        colorScheme === 'dark' && styles.darkControl,\n        backgroundColor && {backgroundColor},\n        !enabled && styles.disabled,\n      ]}\n      onLayout={({\n        nativeEvent: {\n          layout: {width},\n        },\n      }) => {\n        const newSegmentWidth = values.length ? width / values.length : 0;\n        if (newSegmentWidth !== segmentWidth) {\n          animation.setValue(newSegmentWidth * (selectedIndex || 0));\n          setSegmentWidth(newSegmentWidth);\n        }\n      }}>\n      {!backgroundColor && !tintColor && (\n        <SegmentsSeparators\n          values={values.length}\n          selectedIndex={selectedIndex}\n        />\n      )}\n      <View style={styles.segmentsContainer}>\n        {values &&\n          values.map((value, index) => {\n            return (\n              <SegmentedControlTab\n                enabled={enabled}\n                selected={selectedIndex === index}\n                key={index}\n                value={value}\n                tintColor={tintColor}\n                fontStyle={fontStyle}\n                activeFontStyle={activeFontStyle}\n                appearance={colorScheme}\n                onSelect={() => {\n                  handleChange(index);\n                }}\n              />\n            );\n          })}\n      </View>\n      {selectedIndex != null && segmentWidth ? (\n        <Animated.View\n          style={[\n            styles.slider,\n            {\n              transform: [{translateX: animation}],\n              width: segmentWidth - 4,\n              backgroundColor:\n                tintColor || (colorScheme === 'dark' ? '#636366' : 'white'),\n            },\n          ]}\n        />\n      ) : null}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  default: {\n    overflow: 'hidden',\n    position: 'relative',\n    height: 32,\n    backgroundColor: '#EEEEF0',\n    borderRadius: 9,\n  },\n  darkControl: {\n    backgroundColor: '#1C1C1F',\n  },\n  disabled: {\n    opacity: 0.4,\n  },\n  slider: {\n    position: 'absolute',\n    borderRadius: 7,\n    top: 2,\n    bottom: 2,\n    right: 2,\n    left: 2,\n    borderWidth: 0.5,\n    borderColor: 'rgba(0,0,0,0.04)',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3,\n  },\n  segmentsContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    elevation: 5,\n    backgroundColor: 'transparent',\n    zIndex: 99,\n  },\n});\n\nexport default SegmentedControl;\n"],"mappings":"AAIA,YAAY;;AAAC;AAEb,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAY/B,SAAQC,mBAAmB;AAC3B,SAAQC,kBAAkB;AAA8B;AAAA;AAMxD,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,OAYmB;EAAA,IAXvCC,KAAK,QAALA,KAAK;IACLC,QAAQ,QAARA,QAAQ;IACRC,aAAa,QAAbA,aAAa;IAAA,oBACbC,OAAO;IAAPA,OAAO,6BAAG,IAAI;IACdC,aAAa,QAAbA,aAAa;IACbC,MAAM,QAANA,MAAM;IACNC,SAAS,QAATA,SAAS;IACTC,eAAe,QAAfA,eAAe;IACfC,SAAS,QAATA,SAAS;IACTC,eAAe,QAAfA,eAAe;IACfC,UAAU,QAAVA,UAAU;EAEV,IAAMC,eAAe,GAAGC,cAAc,EAAE;EACxC,IAAMC,WAAW,GAAGH,UAAU,IAAIC,eAAe;EACjD,sBAAwCf,KAAK,CAACkB,QAAQ,CAAC,CAAC,CAAC;IAAA;IAAlDC,YAAY;IAAEC,eAAe;EACpC,IAAMC,SAAS,GAAGrB,KAAK,CAACsB,MAAM,CAAC,IAAIC,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EAE7D,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAa,EAAK;IAEtC,IAAMC,KAAU,GAAG;MACjBC,WAAW,EAAE;QACXC,KAAK,EAAErB,MAAM,CAACkB,KAAK,CAAC;QACpBI,oBAAoB,EAAEJ;MACxB;IACF,CAAC;IACDtB,QAAQ,IAAIA,QAAQ,CAACuB,KAAK,CAAC;IAC3BtB,aAAa,IAAIA,aAAa,CAACG,MAAM,CAACkB,KAAK,CAAC,CAAC;EAC/C,CAAC;EAED3B,KAAK,CAACgC,SAAS,CAAC,YAAM;IACpB,IAAIX,SAAS,IAAIF,YAAY,EAAE;MAC7B,IAAIc,KAAK,GAAGC,WAAW,CAACD,KAAK,GAAG,CAACd,YAAY,GAAGA,YAAY;MAC5DI,QAAQ,CAACY,MAAM,CAACd,SAAS,EAAE;QACzBe,OAAO,EAAEH,KAAK,IAAIzB,aAAa,IAAI,CAAC,CAAC;QACrC6B,QAAQ,EAAE,GAAG;QACbC,MAAM,EAAEC,MAAM,CAACC,GAAG,CAACD,MAAM,CAACE,IAAI,CAAC;QAC/BC,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ;EACF,CAAC,EAAE,CAACtB,SAAS,EAAEF,YAAY,EAAEX,aAAa,CAAC,CAAC;EAE5C,OACE,MAAC,IAAI;IACH,KAAK,EAAE,CACLoC,MAAM,CAACC,OAAO,EACdzC,KAAK,EACLa,WAAW,KAAK,MAAM,IAAI2B,MAAM,CAACE,WAAW,EAC5CnC,eAAe,IAAI;MAACA,eAAe,EAAfA;IAAe,CAAC,EACpC,CAACJ,OAAO,IAAIqC,MAAM,CAACG,QAAQ,CAC3B;IACF,QAAQ,EAAE,yBAIJ;MAAA,IAFOC,KAAK,SADhBnB,WAAW,CACToB,MAAM,CAAGD,KAAK;MAGhB,IAAME,eAAe,GAAGzC,MAAM,CAAC0C,MAAM,GAAGH,KAAK,GAAGvC,MAAM,CAAC0C,MAAM,GAAG,CAAC;MACjE,IAAID,eAAe,KAAK/B,YAAY,EAAE;QACpCE,SAAS,CAAC+B,QAAQ,CAACF,eAAe,IAAI1C,aAAa,IAAI,CAAC,CAAC,CAAC;QAC1DY,eAAe,CAAC8B,eAAe,CAAC;MAClC;IACF,CAAE;IAAA,WACD,CAACvC,eAAe,IAAI,CAACD,SAAS,IAC7B,KAAC,kBAAkB;MACjB,MAAM,EAAED,MAAM,CAAC0C,MAAO;MACtB,aAAa,EAAE3C;IAAc,EAEhC,EACD,KAAC,IAAI;MAAC,KAAK,EAAEoC,MAAM,CAACS,iBAAkB;MAAA,UACnC5C,MAAM,IACLA,MAAM,CAAC6C,GAAG,CAAC,UAACxB,KAAK,EAAEH,KAAK,EAAK;QAC3B,OACE,KAAC,mBAAmB;UAClB,OAAO,EAAEpB,OAAQ;UACjB,QAAQ,EAAEC,aAAa,KAAKmB,KAAM;UAElC,KAAK,EAAEG,KAAM;UACb,SAAS,EAAEpB,SAAU;UACrB,SAAS,EAAEE,SAAU;UACrB,eAAe,EAAEC,eAAgB;UACjC,UAAU,EAAEI,WAAY;UACxB,QAAQ,EAAE,oBAAM;YACdS,YAAY,CAACC,KAAK,CAAC;UACrB;QAAE,GARGA,KAAK,CASV;MAEN,CAAC;IAAC,EACC,EACNnB,aAAa,IAAI,IAAI,IAAIW,YAAY,GACpC,KAAC,QAAQ,CAAC,IAAI;MACZ,KAAK,EAAE,CACLyB,MAAM,CAACW,MAAM,EACb;QACEC,SAAS,EAAE,CAAC;UAACC,UAAU,EAAEpC;QAAS,CAAC,CAAC;QACpC2B,KAAK,EAAE7B,YAAY,GAAG,CAAC;QACvBR,eAAe,EACbD,SAAS,KAAKO,WAAW,KAAK,MAAM,GAAG,SAAS,GAAG,OAAO;MAC9D,CAAC;IACD,EACF,GACA,IAAI;EAAA,EACH;AAEX,CAAC;AAED,IAAM2B,MAAM,GAAGc,UAAU,CAACC,MAAM,CAAC;EAC/Bd,OAAO,EAAE;IACPe,QAAQ,EAAE,QAAQ;IAClBC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,EAAE;IACVnD,eAAe,EAAE,SAAS;IAC1BoD,YAAY,EAAE;EAChB,CAAC;EACDjB,WAAW,EAAE;IACXnC,eAAe,EAAE;EACnB,CAAC;EACDoC,QAAQ,EAAE;IACRiB,OAAO,EAAE;EACX,CAAC;EACDT,MAAM,EAAE;IACNM,QAAQ,EAAE,UAAU;IACpBE,YAAY,EAAE,CAAC;IACfE,GAAG,EAAE,CAAC;IACNC,MAAM,EAAE,CAAC;IACTC,KAAK,EAAE,CAAC;IACRC,IAAI,EAAE,CAAC;IACPC,WAAW,EAAE,GAAG;IAChBC,WAAW,EAAE,kBAAkB;IAC/BC,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE;MACZxB,KAAK,EAAE,CAAC;MACRc,MAAM,EAAE;IACV,CAAC;IACDW,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE;EACb,CAAC;EACDtB,iBAAiB,EAAE;IACjBuB,IAAI,EAAE,CAAC;IACPC,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,cAAc;IAC9BC,UAAU,EAAE,QAAQ;IACpBJ,SAAS,EAAE,CAAC;IACZhE,eAAe,EAAE,aAAa;IAC9BqE,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEF,eAAe7E,gBAAgB"},"metadata":{},"sourceType":"module"}