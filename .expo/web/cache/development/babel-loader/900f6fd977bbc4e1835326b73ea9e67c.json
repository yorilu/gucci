{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.usePopover = void 0;\nvar react_1 = require(\"react\");\nvar react_native_1 = require(\"react-native-web/dist/index\");\nfunction usePopover() {\n  var calculateStatusBar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var touchableRef = (0, react_1.useRef)(null);\n  var _ref = (0, react_1.useState)({\n      showPopover: false,\n      popoverAnchor: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      }\n    }),\n    _ref2 = _slicedToArray(_ref, 2),\n    _ref2$ = _ref2[0],\n    showPopover = _ref2$.showPopover,\n    popoverAnchor = _ref2$.popoverAnchor,\n    setState = _ref2[1];\n  var result = (0, react_1.useMemo)(function () {\n    var openPopover = function openPopover() {\n      var handle = (0, react_native_1.findNodeHandle)(touchableRef.current);\n      if (handle) {\n        react_native_1.NativeModules.UIManager.measure(handle, onTouchableMeasured);\n      }\n    };\n    var onTouchableMeasured = function onTouchableMeasured(_x0, _y0, width, height, x, y) {\n      var _a;\n      var dimensions = react_native_1.Dimensions.get('window');\n      setState({\n        showPopover: true,\n        popoverAnchor: {\n          x: react_native_1.I18nManager.isRTL ? dimensions.width - x : x,\n          y: y - (calculateStatusBar ? (_a = react_native_1.StatusBar.currentHeight) !== null && _a !== void 0 ? _a : 0 : 0),\n          width: width,\n          height: height\n        }\n      });\n    };\n    var closePopover = function closePopover() {\n      return setState(function (s) {\n        return Object.assign(Object.assign({}, s), {\n          showPopover: false\n        });\n      });\n    };\n    return {\n      openPopover: openPopover,\n      closePopover: closePopover,\n      touchableRef: touchableRef,\n      popoverVisible: showPopover,\n      popoverAnchorRect: popoverAnchor\n    };\n  }, [calculateStatusBar, touchableRef, showPopover, popoverAnchor, setState]);\n  var openPopover = result.openPopover;\n  (0, react_1.useEffect)(function () {\n    var onOrientationChange = function onOrientationChange() {\n      if (showPopover) {\n        requestAnimationFrame(openPopover);\n      }\n    };\n    var listener = react_native_1.Dimensions.addEventListener('change', onOrientationChange);\n    return function () {\n      listener.remove();\n    };\n  }, [showPopover, openPopover]);\n  return result;\n}\nexports.usePopover = usePopover;","map":{"version":3,"sources":["../src/usePopover.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;AAAoE;AAwBpE,SAAgB,UAAU,GAA2B;EAAA,IAA1B,kBAAkB,uEAAG,KAAK;EACnD,IAAM,YAAY,GAAG,CAAA,CAAA,EAAA,OAAA,CAAA,MAAM,EAAM,IAAI,CAAC;EAEtC,WAAmD,CAAA,CAAA,EAAA,OAAA,CAAA,QAAQ,EAAQ;MACjE,WAAW,EAAE,KAAK;MAClB,aAAa,EAAE;QAAE,CAAC,EAAE,CAAC;QAAE,CAAC,EAAE,CAAC;QAAE,KAAK,EAAE,CAAC;QAAE,MAAM,EAAE;MAAC;KACjD,CAAC;IAAA;IAAA;IAHO,WAAW,UAAX,WAAW;IAAE,aAAa,UAAb,aAAa;IAAI,QAAQ;EAK/C,IAAM,MAAM,GAAG,CAAA,CAAA,EAAA,OAAA,CAAA,OAAO,EAAC,YAAK;IAC1B,IAAM,WAAW,GAAG,SAAd,WAAW,GAAQ;MACvB,IAAM,MAAM,GAAG,CAAA,CAAA,EAAA,cAAA,CAAA,cAAc,EAAC,YAAY,CAAC,OAAO,CAAC;MACnD,IAAI,MAAM,EAAE;QACV,cAAA,CAAA,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,mBAAmB,CAAC;MAC7D;IACH,CAAC;IAED,IAAM,mBAAmB,GAA6B,SAAhD,mBAAmB,CACvB,GAAG,EACH,GAAG,EACH,KAAK,EACL,MAAM,EACN,CAAC,EACD,CAAC,EACC;;MACF,IAAM,UAAU,GAAG,cAAA,CAAA,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC;MAC3C,QAAQ,CAAC;QACP,WAAW,EAAE,IAAI;QACjB,aAAa,EAAE;UACb,CAAC,EAAE,cAAA,CAAA,WAAW,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC;UAC/C,CAAC,EAAE,CAAC,IAAI,kBAAkB,GAAG,CAAA,EAAA,GAAA,cAAA,CAAA,SAAS,CAAC,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,GAAG,CAAC,CAAC;UAC9D,KAAK,EAAL,KAAK;UACL,MAAM,EAAN;QACD;OACF,CAAC;IACJ,CAAC;IAED,IAAM,YAAY,GAAG,SAAf,YAAY;MAAA,OAAS,QAAQ,CAAC,UAAC,CAAC;QAAA,OAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAM,CAAC,CAAA,EAAA;UAAE,WAAW,EAAE;QAAK,CAAA,CAAA;MAAA,CAAG,CAAC;IAAA;IAE1E,OAAO;MACL,WAAW,EAAX,WAAW;MACX,YAAY,EAAZ,YAAY;MACZ,YAAY,EAAZ,YAAY;MACZ,cAAc,EAAE,WAAW;MAC3B,iBAAiB,EAAE;KACpB;EACH,CAAC,EAAE,CAAC,kBAAkB,EAAE,YAAY,EAAE,WAAW,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;EAE5E,IAAQ,WAAW,GAAK,MAAM,CAAtB,WAAW;EAEnB,CAAA,CAAA,EAAA,OAAA,CAAA,SAAS,EAAC,YAAK;IACb,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,GAAQ;MAC/B,IAAI,WAAW,EAAE;QAEf,qBAAqB,CAAC,WAAW,CAAC;MACnC;IACH,CAAC;IACD,IAAM,QAAQ,GAAG,cAAA,CAAA,UAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAC;IAC3E,OAAO,YAAK;MACV,QAAQ,CAAC,MAAM,EAAE;IACnB,CAAC;EACH,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;EAE9B,OAAO,MAAM;AACf;AA/DA,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.usePopover = void 0;\nconst react_1 = require(\"react\");\nconst react_native_1 = require(\"react-native\");\nfunction usePopover(calculateStatusBar = false) {\n    const touchableRef = (0, react_1.useRef)(null);\n    const [{ showPopover, popoverAnchor }, setState] = (0, react_1.useState)({\n        showPopover: false,\n        popoverAnchor: { x: 0, y: 0, width: 0, height: 0 },\n    });\n    const result = (0, react_1.useMemo)(() => {\n        const openPopover = () => {\n            const handle = (0, react_native_1.findNodeHandle)(touchableRef.current);\n            if (handle) {\n                react_native_1.NativeModules.UIManager.measure(handle, onTouchableMeasured);\n            }\n        };\n        const onTouchableMeasured = (_x0, _y0, width, height, x, y) => {\n            var _a;\n            const dimensions = react_native_1.Dimensions.get('window');\n            setState({\n                showPopover: true,\n                popoverAnchor: {\n                    x: react_native_1.I18nManager.isRTL ? dimensions.width - x : x,\n                    y: y - (calculateStatusBar ? (_a = react_native_1.StatusBar.currentHeight) !== null && _a !== void 0 ? _a : 0 : 0),\n                    width,\n                    height,\n                },\n            });\n        };\n        const closePopover = () => setState((s) => (Object.assign(Object.assign({}, s), { showPopover: false })));\n        return {\n            openPopover,\n            closePopover,\n            touchableRef,\n            popoverVisible: showPopover,\n            popoverAnchorRect: popoverAnchor,\n        };\n    }, [calculateStatusBar, touchableRef, showPopover, popoverAnchor, setState]);\n    const { openPopover } = result;\n    (0, react_1.useEffect)(() => {\n        const onOrientationChange = () => {\n            if (showPopover) {\n                requestAnimationFrame(openPopover);\n            }\n        };\n        const listener = react_native_1.Dimensions.addEventListener('change', onOrientationChange);\n        return () => {\n            listener.remove();\n        };\n    }, [showPopover, openPopover]);\n    return result;\n}\nexports.usePopover = usePopover;\n//# sourceMappingURL=usePopover.js.map"]},"metadata":{},"sourceType":"script"}