{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RNCCameraRoll from \"./nativeInterface\";\nvar GROUP_TYPES_OPTIONS = {\n  Album: 'Album',\n  All: 'All',\n  Event: 'Event',\n  Faces: 'Faces',\n  Library: 'Library',\n  PhotoStream: 'PhotoStream',\n  SavedPhotos: 'SavedPhotos'\n};\nvar ASSET_TYPE_OPTIONS = {\n  All: 'All',\n  Videos: 'Videos',\n  Photos: 'Photos'\n};\nexport var CameraRoll = function () {\n  function CameraRoll() {\n    _classCallCheck(this, CameraRoll);\n  }\n  _createClass(CameraRoll, null, [{\n    key: \"deletePhotos\",\n    value: function deletePhotos(photoUris) {\n      return RNCCameraRoll.deletePhotos(photoUris);\n    }\n  }, {\n    key: \"save\",\n    value: function save(tag) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$type = options.type,\n        type = _options$type === void 0 ? 'auto' : _options$type;\n      var _options$album = options.album,\n        album = _options$album === void 0 ? '' : _options$album;\n      if (tag === '') throw new Error('tag must be a valid string');\n      if (type === 'auto') {\n        var _tag$split$slice$;\n        var fileExtension = (_tag$split$slice$ = tag.split('.').slice(-1)[0]) != null ? _tag$split$slice$ : '';\n        if (['mov', 'mp4'].indexOf(fileExtension.toLowerCase()) >= 0) type = 'video';else type = 'photo';\n      }\n      return RNCCameraRoll.saveToCameraRoll(tag, {\n        type: type,\n        album: album\n      });\n    }\n  }, {\n    key: \"saveToCameraRoll\",\n    value: function saveToCameraRoll(tag, type) {\n      console.warn('CameraRoll.saveToCameraRoll(tag, type) is deprecated.  Use the save function instead');\n      return CameraRoll.save(tag, {\n        type: type\n      });\n    }\n  }, {\n    key: \"getAlbums\",\n    value: function getAlbums() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        assetType: 'All'\n      };\n      return RNCCameraRoll.getAlbums(params);\n    }\n  }, {\n    key: \"getParamsWithDefaults\",\n    value: function getParamsWithDefaults(params) {\n      var newParams = _objectSpread({}, params);\n      if (newParams.assetType === undefined) newParams.assetType = 'All';\n      if (newParams.groupTypes === undefined && Platform.OS !== 'android') newParams.groupTypes = 'All';\n      return newParams;\n    }\n  }, {\n    key: \"getPhotos\",\n    value: function getPhotos(params) {\n      params = CameraRoll.getParamsWithDefaults(params);\n      return RNCCameraRoll.getPhotos(params);\n    }\n  }, {\n    key: \"iosGetImageDataById\",\n    value: function iosGetImageDataById(internalID) {\n      var convertHeicImages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var conversionOption = {\n        convertHeicImages: convertHeicImages\n      };\n      return RNCCameraRoll.getPhotoByInternalID(internalID, conversionOption);\n    }\n  }]);\n  return CameraRoll;\n}();\n_defineProperty(CameraRoll, \"GroupTypesOptions\", GROUP_TYPES_OPTIONS);\n_defineProperty(CameraRoll, \"AssetTypeOptions\", ASSET_TYPE_OPTIONS);","map":{"version":3,"sources":["CameraRoll.ts"],"names":["RNCCameraRoll","GROUP_TYPES_OPTIONS","Album","All","Event","Faces","Library","PhotoStream","SavedPhotos","ASSET_TYPE_OPTIONS","Videos","Photos","CameraRoll","deletePhotos","photoUris","save","tag","options","type","album","Error","fileExtension","split","slice","indexOf","toLowerCase","saveToCameraRoll","console","warn","getAlbums","params","assetType","getParamsWithDefaults","newParams","undefined","groupTypes","Platform","OS","getPhotos","iosGetImageDataById","internalID","convertHeicImages","conversionOption","getPhotoByInternalID"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Platform } from 'react-native';\nimport RNCCameraRoll from './nativeInterface';\n\nconst GROUP_TYPES_OPTIONS = {\n  Album: 'Album',\n  All: 'All', // default\n  Event: 'Event',\n  Faces: 'Faces',\n  Library: 'Library',\n  PhotoStream: 'PhotoStream',\n  SavedPhotos: 'SavedPhotos',\n};\n\nconst ASSET_TYPE_OPTIONS = {\n  All: 'All',\n  Videos: 'Videos',\n  Photos: 'Photos',\n};\n\nexport type GroupTypes =\n  | 'Album'\n  | 'All'\n  | 'Event'\n  | 'Faces'\n  | 'Library'\n  | 'PhotoStream'\n  | 'SavedPhotos';\n\nexport type Include =\n  | 'filename'\n  | 'fileSize'\n  | 'fileExtension'\n  | 'location'\n  | 'imageSize'\n  | 'playableDuration'\n  | 'orientation';\n\nexport type AssetType = 'All' | 'Videos' | 'Photos';\n\n/**\n * Shape of the param arg for the `getPhotos` function.\n */\nexport type GetPhotosParams = {\n  /**\n   * The number of photos wanted in reverse order of the photo application\n   * (i.e. most recent first).\n   */\n  first: number;\n\n  /**\n   * A cursor that matches `page_info { end_cursor }` returned from a previous\n   * call to `getPhotos`\n   */\n  after?: string;\n\n  /**\n   * Specifies which group types to filter the results to.\n   */\n  groupTypes?: GroupTypes;\n\n  /**\n   * Specifies filter on group names, like 'Recent Photos' or custom album\n   * titles.\n   */\n  groupName?: string;\n\n  /**\n   * Specifies filter on asset type\n   */\n  assetType?: AssetType;\n\n  /**\n   * Earliest time to get photos from. A timestamp in milliseconds. Exclusive.\n   */\n  fromTime?: number;\n\n  /**\n   * Latest time to get photos from. A timestamp in milliseconds. Inclusive.\n   */\n  toTime?: number;\n\n  /**\n   * Filter by mimetype (e.g. image/jpeg).\n   */\n  mimeTypes?: Array<string>;\n\n  /**\n   * Specific fields in the output that we want to include, even though they\n   * might have some performance impact.\n   */\n  include?: Include[];\n};\n\nexport type PhotoIdentifier = {\n  node: {\n    type: string;\n    group_name: string;\n    image: {\n      filename: string | null;\n      filepath: string | null;\n      extension: string | null;\n      uri: string;\n      height: number;\n      width: number;\n      fileSize: number | null;\n      playableDuration: number;\n      orientation: number | null;\n    };\n    timestamp: number;\n    location: {\n      latitude?: number;\n      longitude?: number;\n      altitude?: number;\n      heading?: number;\n      speed?: number;\n    } | null;\n  };\n};\n\nexport type PhotoConvertionOptions = {\n  convertHeicImages: boolean;\n};\n\nexport type PhotoIdentifiersPage = {\n  edges: Array<PhotoIdentifier>;\n  page_info: {\n    has_next_page: boolean;\n    start_cursor?: string;\n    end_cursor?: string;\n  };\n  limited?: boolean;\n};\n\nexport type SaveToCameraRollOptions = {\n  type?: 'photo' | 'video' | 'auto';\n  album?: string;\n};\n\nexport type GetAlbumsParams = {\n  assetType?: AssetType;\n};\n\nexport type Album = {\n  title: string;\n  count: number;\n};\n\n/**\n * `CameraRoll` provides access to the local camera roll or photo library.\n *\n * See https://facebook.github.io/react-native/docs/cameraroll.html\n */\nexport class CameraRoll {\n  static GroupTypesOptions = GROUP_TYPES_OPTIONS;\n  static AssetTypeOptions = ASSET_TYPE_OPTIONS;\n\n  /**\n   * On iOS: requests deletion of a set of photos from the camera roll.\n   * On Android: Deletes a set of photos from the camera roll.\n   *\n   */\n  static deletePhotos(photoUris: Array<string>): void {\n    return RNCCameraRoll.deletePhotos(photoUris);\n  }\n\n  /**\n   * Saves the photo or video to the camera roll or photo library.\n   *\n   */\n  static save(\n    tag: string,\n    options: SaveToCameraRollOptions = {},\n  ): Promise<string> {\n    let { type = 'auto' } = options;\n    const { album = '' } = options;\n    if (tag === '') throw new Error('tag must be a valid string');\n\n    if (type === 'auto') {\n      const fileExtension = tag.split('.').slice(-1)[0] ?? '';\n      if (['mov', 'mp4'].indexOf(fileExtension.toLowerCase()) >= 0) type = 'video';\n      else type = 'photo';\n    }\n    return RNCCameraRoll.saveToCameraRoll(tag, { type, album });\n  }\n\n  static saveToCameraRoll(\n    tag: string,\n    type?: 'photo' | 'video' | 'auto',\n  ): Promise<string> {\n    console.warn(\n      'CameraRoll.saveToCameraRoll(tag, type) is deprecated.  Use the save function instead',\n    );\n    return CameraRoll.save(tag, { type });\n  }\n\n  static getAlbums(\n    params: GetAlbumsParams = { assetType: 'All' },\n  ): Promise<Album[]> {\n    return RNCCameraRoll.getAlbums(params);\n  }\n\n  static getParamsWithDefaults(params: GetPhotosParams): GetPhotosParams {\n    const newParams = { ...params };\n    if (newParams.assetType === undefined) newParams.assetType = 'All';\n\n    if (newParams.groupTypes === undefined && Platform.OS !== 'android')\n      newParams.groupTypes = 'All';\n\n    return newParams;\n  }\n\n  /**\n   * Returns a Promise with photo identifier objects from the local camera\n   * roll of the device matching shape defined by `getPhotosReturnChecker`.\n   *\n   * See https://facebook.github.io/react-native/docs/cameraroll.html#getphotos\n   */\n  static getPhotos(params: GetPhotosParams): Promise<PhotoIdentifiersPage> {\n    params = CameraRoll.getParamsWithDefaults(params);\n    return RNCCameraRoll.getPhotos(params);\n  }\n\n  /**\n   * Returns a Promise with photo internal path.\n   * if conversion is requested from HEIC then temporary file is created.\n   *\n   * @param internalID - PH photo internal ID.\n   * @param convertHeicImages - whether to convert or not heic images to JPEG.\n   * @returns Promise<PhotoIdentifier>\n   */\n  static iosGetImageDataById(\n    internalID: string,\n    convertHeicImages = false,\n  ): Promise<PhotoIdentifier> {\n    const conversionOption: PhotoConvertionOptions = {\n      convertHeicImages: convertHeicImages,\n    };\n    return RNCCameraRoll.getPhotoByInternalID(internalID, conversionOption);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}