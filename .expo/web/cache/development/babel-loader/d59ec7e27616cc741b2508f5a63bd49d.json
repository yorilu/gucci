{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport { CameraRoll } from \"./CameraRoll\";\nvar initialState = {\n  edges: [],\n  page_info: {\n    end_cursor: '',\n    has_next_page: false,\n    start_cursor: ''\n  }\n};\nvar defaultConfig = {\n  first: 20,\n  groupTypes: 'All'\n};\nexport function useCameraRoll() {\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    photos = _useState2[0],\n    setPhotos = _useState2[1];\n  function getPhotos() {\n    return _getPhotos.apply(this, arguments);\n  }\n  function _getPhotos() {\n    _getPhotos = _asyncToGenerator(function* () {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;\n      try {\n        var result = yield CameraRoll.getPhotos(config);\n        setPhotos(result);\n      } catch (error) {\n        if (__DEV__) console.log('[useCameraRoll] Error getting photos: ', error);\n      }\n    });\n    return _getPhotos.apply(this, arguments);\n  }\n  function save() {\n    return _save.apply(this, arguments);\n  }\n  function _save() {\n    _save = _asyncToGenerator(function* () {\n      try {\n        yield CameraRoll.save.apply(CameraRoll, arguments);\n      } catch (error) {\n        if (__DEV__) console.log('[useCameraRoll] Error saving to camera roll: ', error);\n      }\n    });\n    return _save.apply(this, arguments);\n  }\n  return [photos, getPhotos, save];\n}","map":{"version":3,"sources":["useCameraRoll.ts"],"names":["useState","CameraRoll","initialState","edges","page_info","end_cursor","has_next_page","start_cursor","defaultConfig","first","groupTypes","useCameraRoll","photos","setPhotos","getPhotos","config","result","error","__DEV__","console","log","save"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAMA,SAAQC,UAAR;AAEA,IAAMC,YAAkC,GAAG;EACzCC,KAAK,EAAE,EADkC;EAEzCC,SAAS,EAAE;IACTC,UAAU,EAAE,EADH;IAETC,aAAa,EAAE,KAFN;IAGTC,YAAY,EAAE;EAHL;AAF8B,CAA3C;AASA,IAAMC,aAA8B,GAAG;EACrCC,KAAK,EAAE,EAD8B;EAErCC,UAAU,EAAE;AAFyB,CAAvC;AAWA,OAAO,SAASC,aAAT,GAA8C;EACnD,gBAA4BX,QAAQ,CAAuBE,YAAvB,CAApC;IAAA;IAAOU,MAAD;IAASC,SAAT;EAAN,SAEeC,SAAf;IAAA;EAAA;EAAA;IAAA,+BAAA,aAEiB;MAAA,IADfC,MACe,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADWP,aACX;MACf,IAAI;QACF,IAAMQ,MAAM,SAASf,UAAU,CAACa,SAAXb,CAAqBc,MAArBd,CAArB;QACAY,SAAS,CAACG,MAAD,CAATH;MACD,CAHD,CAGE,OAAOI,KAAP,EAAc;QACd,IAAIC,OAAJ,EAAaC,OAAO,CAACC,GAARD,CAAY,wCAAZA,EAAsDF,KAAtDE,CAAAA;MACd;IACF,CAAA;IAAA;EAAA;EAAA,SAEcE,IAAf;IAAA;EAAA;EAAA;IAAA,0BAAA,aAEiB;MACf,IAAI;QACF,MAAMpB,UAAU,CAACoB,IAAXpB,OAAAA,UAAU,EAAM,SAAhBA,CAAN;MACD,CAFD,CAEE,OAAOgB,KAAP,EAAc;QACd,IAAIC,OAAJ,EACEC,OAAO,CAACC,GAARD,CAAY,+CAAZA,EAA6DF,KAA7DE,CAAAA;MACH;IACF,CAAA;IAAA;EAAA;EAED,OAAO,CAACP,MAAD,EAASE,SAAT,EAAoBO,IAApB,CAAP;AACD","sourcesContent":["import {useState} from 'react';\nimport type {\n  GetPhotosParams,\n  PhotoIdentifiersPage,\n  SaveToCameraRollOptions,\n} from './CameraRoll';\nimport {CameraRoll} from './CameraRoll';\n\nconst initialState: PhotoIdentifiersPage = {\n  edges: [],\n  page_info: {\n    end_cursor: '',\n    has_next_page: false,\n    start_cursor: '',\n  },\n};\n\nconst defaultConfig: GetPhotosParams = {\n  first: 20,\n  groupTypes: 'All',\n};\n\ntype UseCameraRollResult = [\n  PhotoIdentifiersPage,\n  (config?: GetPhotosParams) => Promise<void>,\n  (tag: string, options?: SaveToCameraRollOptions) => Promise<void>,\n];\n\nexport function useCameraRoll(): UseCameraRollResult {\n  const [photos, setPhotos] = useState<PhotoIdentifiersPage>(initialState);\n\n  async function getPhotos(\n    config: GetPhotosParams = defaultConfig,\n  ): Promise<void> {\n    try {\n      const result = await CameraRoll.getPhotos(config);\n      setPhotos(result);\n    } catch (error) {\n      if (__DEV__) console.log('[useCameraRoll] Error getting photos: ', error);\n    }\n  }\n\n  async function save(\n    ...args: Parameters<typeof CameraRoll.save>\n  ): Promise<void> {\n    try {\n      await CameraRoll.save(...args);\n    } catch (error) {\n      if (__DEV__)\n        console.log('[useCameraRoll] Error saving to camera roll: ', error);\n    }\n  }\n\n  return [photos, getPhotos, save];\n}\n"]},"metadata":{},"sourceType":"module"}